// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../ERD.md"
  title    = "Eatbook Community"
}

//-----------------------------------------------------------
// Novel
//-----------------------------------------------------------
/// 소설 테이블은 최초 요청 시, 생성 되며 이후에 오는 중복된 요청은 snapshot에 기록됩니다.
///
/// @namespace Novel
/// @author Eatbook
model novel {
  //----
  // COLUMNS
  //----
  /// PK
  ///
  /// 소설을 식별하기 위한 고유 번호
  ///
  /// @format UCI
  id String @id @db.VarChar @default(cuid())

  /// 최초 소설 등록 요청일
  createdAt DateTime @default(now())

  /// 소설 등록 요청 삭제 일
  deletedAt DateTime?

  //----
  // RELATIONS
  //----
  snapshot novelsnapshot[] @relation("NovelSnapshot")
}

/// 소설 등록 요청을 snapshot으로 만들어 타임라인 순서대로 저장해 유지 보수와 데이터 추적에 용이하도록 합니다.
///
/// 같은 소설을 다른 사용자가 요청하거나 처리상태, 소설 입력 정보를 롤백해야 할 경우에도 용이합니다.
/// 
/// 특정 소설에 대한 모든 요청을 snapshot으로 저장하는 특성을 활용하여 가장 많은 요청을 받은 소설,
/// 사람들의 관심을 가장 많이 받고 있는 소설 등 확장에 가능성을 두고 설계하였습니다.
/// @namespace Novel
model novelsnapshot {
  //----
  // COLUMNS
  //----
  /// PK
  ///
  /// @format CUID
  id String @id @db.VarChar(30) @default(cuid())

  /// 해당 snapshot과 연결되어 있는 소설의 고유 식별자 입니다. (@link novel.id)
  ///
  /// @format CUID
  novel_id String @db.VarChar(30)

  /// 소설 등록 요청일 입니다.
  createdAt DateTime @default(now())

  //----
  // RELATIONS
  //----
  novel novel @relation("NovelSnapshot", references: [id], fields: [novel_id], onDelete: Cascade)
  request requester? @relation("Requester")
  info novelinfo? @relation("NovelInfo")
  status novelstatus? @relation("NovelStatus")
}

/// 소설 등록 요청자의 정보입니다.
///
/// @namespace Novel
model requester {
  //----
  // COLUMNS
  //----
  /// PK
  ///
  /// @format CUID
  id String @id @db.VarChar(30) @default(cuid())

  /// 소설 등록 요청자와 연결되어 있는 snapshot의 고유 식별자 입니다. (@link novelsnapshot.id)
  ///
  /// @format CUID
  novelsnapshot_id String @unique @db.VarChar(30)

  /// 소설 등록 요청자의 이메일 주소입니다.
  ///
  /// @format email
  email String @db.VarChar

  /// 소설 요청자의 이름입니다.
  name String @db.VarChar

  //----
  // RELATIONS
  //----
  novelsnapshot novelsnapshot @relation("Requester", references: [id], fields: [novelsnapshot_id])
}

/// 등록 요청한 소설의 정보입니다.
///
/// @namespace Novel
model novelinfo {
  //----
  // COLUMNS
  //----
  /// PK
  ///
  /// @format CUID
  id String @id @db.VarChar(30) @default(cuid())

  /// 소설 정보와 연결되어 있는 snapshot의 고유 식별자 입니다. (@link novelsnapshot.id)
  ///
  /// @format CUID
  novelsnapshot_id String @unique @db.VarChar(30)

  /// 최초 소설 정보를 등록한 일입니다.
  createdAt DateTime @default(now())

  //----
  // RELATIONS
  //----
  novelsnapshot novelsnapshot @relation("NovelInfo", references: [id], fields: [novelsnapshot_id])
  snapshot novelinfosnapshot[] @relation("NovelInfoSnapshot")
}

/// 위에 기술한 바와 같이 유지 보수와 데이터 추적에 용이하도록 소설 정보 변경 이력을 snapshot 단위로 저장합니다.
///
/// @namespace Novel
model novelinfosnapshot {
  //----
  // COLUMNS
  //----
  /// PK
  ///
  /// @format CUID
  id String @id @db.VarChar(30) @default(cuid())

  /// 소설의 제목입니다.
  title String @db.VarChar(200)

  /// 소설의 줄거리입니다.
  ///
  /// 공백을 포함해 200자까지 입력을 받습니다.
  description String @db.VarChar(200) @default("")

  /// 참고한 소설 페이지 주소입니다.
  ///
  /// 저작권 및 데이터 추출을 위해 사용되며, 반드시 입력받아야 합니다.
  ///
  /// @format url
  ref String @db.VarChar

  /// 해당 snapshot과 연결되어 있는 소설 정보의 고유 식별자 입니다. (@link novelinfo.id)
  ///
  /// @format CUID
  novelinfo_id String @unique @db.VarChar(30)

  /// 소설 정보를 등록한 일입니다.
  createdAt DateTime @default(now())

  //----
  // RELATIONS
  //----
  novelinfo novelinfo @relation("NovelInfoSnapshot", references: [id], fields: [novelinfo_id], onDelete: Cascade)
}

/// 소설 등록 요청 처리를 위한 테이블 입니다.
///
/// @namespace Novel
model novelstatus {
  //----
  // COLUMNS
  //----
  /// PK
  ///
  /// @format CUID
  id String @id @db.VarChar(30) @default(cuid())

  /// 소설 정보와 연결되어 있는 snapshot의 고유 식별자 입니다. (@link novelsnapshot.id)
  ///
  /// @format CUID
  novelsnapshot_id String @unique @db.VarChar(30)

  /// 최초 소설 요청 처리를 등록한 일입니다.
  createdAt DateTime @default(now())

  //----
  // RELATIONS
  //----
  novelsnapshot novelsnapshot @relation("NovelStatus", references: [id], fields: [novelsnapshot_id])
  snapshot novelstatussnapshot[] @relation("NovelStatusSnapshot")
}

model novelstatussnapshot {
  //----
  // COLUMNS
  //----
  /// PK
  ///
  /// @format CUID
  id String @id @db.VarChar(30) @default(cuid())

  /// 해당 snapshot과 연결되어 있는 소설 등록 요청 상태의 고유 식별자 입니다. (@link novelinfo.id)
  ///
  /// @format CUID
  novelstatus_id String @unique @db.VarChar(30)

  /// 소설 등록 요청 결과에 대한 사유입니다.
  ///
  /// 정상 처리에 경우 "완료"와 같은 형식 통일이 필요합니다.
  reason String @db.VarChar

  /// 소설 등록 요청 상태입니다.
  ///
  /// @format pending | reviewed | confirm | cancel
  status String @db.VarChar(10)

  /// 소설 등록 요청 처리를 한 담당자의 이메일 주소입니다.
  ///
  /// @format email
  responsiblePersonEmail String @db.VarChar

  /// 소설 요청 처리를 등록한 일입니다.
  createdAt DateTime @default(now())

  //----
  // RELATIONS
  //----
  novelstatus novelstatus @relation("NovelStatusSnapshot", fields: [novelstatus_id], references: [id])
}